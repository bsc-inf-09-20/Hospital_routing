# -*- coding: utf-8 -*-
"""
/***************************************************************************
 shortPathToHospital
                                 A QGIS plugin
 This plugin finds shortest path to the hospitals
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-30
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Tadala
        email                : bsc-com-24-20@unima.ac.mw
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import (
    QgsProcessing,
    QgsProcessingException,
    QgsProcessingAlgorithm,
    QgsProcessingParameterFeatureSink,
    QgsFeatureSink,
    QgsVectorLayer,
    QgsDataSourceUri,
    QgsProject
)

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .short_path_to_hospital_dialog import shortPathToHospitalDialog
import os.path


class shortPathToHospital:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'shortPathToHospital_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&short_path_to_hospital')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None


    def connect_to_postgis(self, feedback):
        """
        Connects to PostGIS database and retrieves hospital names and road numbers.
        """
        feedback.pushInfo("Connecting to PostGIS...")
        uri = QgsDataSourceUri()

        # Database connection settings
        uri.setConnection("localhost", "5432", "analysis", "postgres", "1234")

        # Fetch hospitals
        hospital_query = "SELECT name FROM hotosm_mwi_health_facilities_points_shp"
        hospital_layer = QgsVectorLayer(f"{uri.uri()} key=geom sql={hospital_query}", 
                                        "Hospitals", "postgres")
        if not hospital_layer.isValid():
            raise QgsProcessingException("Failed to load hospital data.")

        hospital_names = [f["name"] for f in hospital_layer.getFeatures()]

        # Fetch roads
        road_query = "SELECT roadno FROM roads1"
        road_layer = QgsVectorLayer(f"{uri.uri()} key=geom sql={road_query}", 
                                    "Roads", "postgres")
        if not road_layer.isValid():
            raise QgsProcessingException("Failed to load road data.")

        roads_number = [f["roadno"] for f in road_layer.getFeatures()]

        feedback.pushInfo(f"Hospitals: {', '.join(hospital_names)}")
        feedback.pushInfo(f"Road numbers: {', '.join(roads_number)}")

        return roads_number, hospital_names, hospital_layer, road_layer

    def processAlgorithm(self, parameters, context, feedback):
        """
        Main processing logic for the algorithm.
        """
        feedback.pushInfo("Fetching data from PostGIS...")
        road_numbers, hospital_names, hospital_layer, road_layer = self.connect_to_postgis(feedback)

        if not hospital_layer or not road_layer:
            raise QgsProcessingException("Unable to load the necessary layers.")

        # Display dialog for user input
        dialog = shortPathToHospitalDialog()
        dialog.comboBox.addItems(road_numbers)
        dialog.comboBox_2.addItems(hospital_names)

        if not dialog.exec_():
            raise QgsProcessingException("User canceled the operation.")

        selected_road = dialog.comboBox.currentText()
        selected_hospital = dialog.comboBox_2.currentText()

        feedback.pushInfo(f"Selected Road: {selected_road}")
        feedback.pushInfo(f"Selected Hospital: {selected_hospital}")

        # Create an output feature sink
        (sink, dest_id) = self.parameterAsSink(
            parameters,
            self.OUTPUT,
            context,
            road_layer.fields(),
            road_layer.wkbType(),
            road_layer.sourceCrs()
        )

        for feature in road_layer.getFeatures():
            if feedback.isCanceled():
                break
            sink.addFeature(feature, QgsFeatureSink.FastInsert)

        feedback.pushInfo("Shortest path analysis completed.")
        return {self.OUTPUT: dest_id}

    def tr(self, string):
        return QCoreApplication.translate("hospitalRoute", string)


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('shortPathToHospital', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/short_path_to_hospital/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'short path to hospital'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&short_path_to_hospital'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = shortPathToHospitalDialog()


        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox.addItems([layer.name() for layer in layers])

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


